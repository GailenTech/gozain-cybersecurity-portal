name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Tests E2E para validar todo el sistema
  test:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        npm install --save-dev cypress@13.17.0

    - name: Start test server
      run: |
        export FLASK_ENV=testing
        python backend/app.py &
        echo $! > server.pid
        sleep 10
      
    - name: Wait for server
      run: |
        for i in {1..20}; do
          if curl -f http://localhost:5001/ > /dev/null 2>&1; then
            echo "✅ Server ready"
            break
          fi
          echo "⏳ Waiting for server... ($i/20)"
          sleep 3
        done

    - name: Run Core Tests
      run: |
        npx cypress run \
          --spec "cypress/e2e/00-setup.cy.js,cypress/e2e/inventario-basico.cy.js,cypress/e2e/dashboard-ciberseguridad.cy.js" \
          --config baseUrl=http://localhost:5001 \
          --browser electron \
          --headless

    - name: Run Application Tests  
      run: |
        npx cypress run \
          --spec "cypress/e2e/inventario-funcionalidad.cy.js,cypress/e2e/03-impacts-optimized.cy.js" \
          --config baseUrl=http://localhost:5001 \
          --browser electron \
          --headless

    - name: Run Vue Migration Tests
      run: |
        npx cypress run \
          --spec "cypress/e2e/impactos-vue-migracion.cy.js,cypress/e2e/madurez-vue-migracion.cy.js" \
          --config baseUrl=http://localhost:5001 \
          --browser electron \
          --headless

    - name: Stop server
      if: always()
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
        fi

    - name: Upload test artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-artifacts
        path: |
          cypress/videos/
          cypress/screenshots/

  # Deploy solo si los tests pasan
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: write
      id-token: write
    
    env:
      PROJECT_ID: inventario-iso27001-20250708
      SERVICE_NAME: gozain
      REGION: us-central1
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update version
      run: |
        CURRENT_VERSION=$(jq -r '.version' version.json)
        BUILD_NUMBER=${GITHUB_RUN_NUMBER}
        NEW_VERSION="${CURRENT_VERSION}.${BUILD_NUMBER}"
        jq --arg version "$NEW_VERSION" '.version = $version' version.json > version_temp.json
        mv version_temp.json version.json
        echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker
      run: gcloud auth configure-docker

    - name: Build and push Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$VERSION .
        docker tag gcr.io/$PROJECT_ID/$SERVICE_NAME:$VERSION gcr.io/$PROJECT_ID/$SERVICE_NAME:latest
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$VERSION
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:latest

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$VERSION \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --memory 1Gi \
          --cpu 1 \
          --max-instances 3 \
          --port 8080

    - name: Get service URL
      id: get-url
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
        echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "🚀 Deployed to: $SERVICE_URL"

    - name: Commit version update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add version.json
        git commit -m "ci: bump version to $VERSION [skip ci]" || exit 0
        git push

    - name: Create deployment annotation
      run: |
        echo "✅ **Deployment Successful**" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **URL**: ${{ steps.get-url.outputs.service_url }}" >> $GITHUB_STEP_SUMMARY
        echo "📦 **Version**: ${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "🧪 **Tests**: All E2E tests passed" >> $GITHUB_STEP_SUMMARY
        echo "🛠️ **Features**: Vue 3 migrations for Inventario, Impactos, and Madurez" >> $GITHUB_STEP_SUMMARY