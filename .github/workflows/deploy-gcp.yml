name: Deploy to Google Cloud Run

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  PROJECT_ID: inventario-iso27001-20250708
  SERVICE_NAME: gozain
  REGION: us-central1

jobs:
  deploy:
    name: Deploy to GCP
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      id-token: write
    
    outputs:
      service_url: ${{ steps.get-url.outputs.service_url }}
      version: ${{ steps.update-version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Update version with build number
      id: update-version
      run: |
        # Leer versión actual
        CURRENT_VERSION=$(jq -r '.version' version.json)
        # Separar major.minor.patch
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        # Actualizar con número de build
        NEW_VERSION="${MAJOR}.${MINOR}.${{ github.run_number }}"
        # Actualizar archivo
        jq --arg version "$NEW_VERSION" --arg date "$(date +%Y-%m-%d)" \
          '.version = $version | .date = $date' version.json > version.tmp.json
        mv version.tmp.json version.json
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "Updated version to $NEW_VERSION"
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Configure Docker for Google Artifact Registry
      run: |
        gcloud auth configure-docker
    
    - name: Enable required APIs
      run: |
        gcloud services enable cloudbuild.googleapis.com
        gcloud services enable run.googleapis.com
        gcloud services enable artifactregistry.googleapis.com
    
    - name: Build and Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --source . \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --memory 512Mi \
          --cpu 1 \
          --timeout 300 \
          --max-instances 10 \
          --port 8080 \
          --set-env-vars="VERSION=${{ env.NEW_VERSION }}"
    
    - name: Get Service URL
      id: get-url
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --format 'value(status.url)')
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
        echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "Service deployed to: $SERVICE_URL"
    
    - name: Commit version update
      if: github.event_name == 'push'
      run: |
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"
        git add version.json
        git diff --quiet && git diff --staged --quiet || git commit -m "Update version to ${{ env.NEW_VERSION }} [skip ci]"
        git push
    
    - name: Create deployment annotation
      if: success()
      run: |
        echo "::notice title=Deployment Successful::Gozain v${{ env.NEW_VERSION }} deployed to ${{ env.SERVICE_URL }}"
    
    - name: Create GitHub deployment
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: '${{ inputs.environment || 'production' }}',
            description: 'Gozain v${{ env.NEW_VERSION }}',
            required_contexts: [],
            auto_merge: false
          });
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: 'success',
            environment_url: '${{ env.SERVICE_URL }}',
            description: 'Deployment successful'
          });
    
    - name: Notify Slack (if configured)
      if: success() && vars.SLACK_WEBHOOK_URL != ''
      run: |
        curl -X POST ${{ vars.SLACK_WEBHOOK_URL }} \
          -H 'Content-type: application/json' \
          -d '{
            "text": "✅ *Gozain v${{ env.NEW_VERSION }} deployed successfully*",
            "attachments": [{
              "color": "good",
              "fields": [
                {"title": "Version", "value": "${{ env.NEW_VERSION }}", "short": true},
                {"title": "Environment", "value": "${{ inputs.environment || '\''production'\'' }}", "short": true},
                {"title": "URL", "value": "${{ env.SERVICE_URL }}", "short": false},
                {"title": "Deployed by", "value": "${{ github.actor }}", "short": true}
              ]
            }]
          }'

  run-e2e-tests:
    name: Run E2E Tests After Deploy
    needs: deploy
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Wait for deployment to stabilize
      run: |
        echo "Waiting 30 seconds for deployment to stabilize..."
        sleep 30
    
    - name: Run setup test suite
      uses: cypress-io/github-action@v6
      with:
        browser: chrome
        headed: false
        config: baseUrl=${{ needs.deploy.outputs.service_url || 'https://gozain-687354193398.us-central1.run.app' }}
        spec: cypress/e2e/00-test-setup.cy.js
        wait-on: ${{ needs.deploy.outputs.service_url || 'https://gozain-687354193398.us-central1.run.app' }}
        wait-on-timeout: 120
      continue-on-error: true
    
    - name: Run critical path tests
      uses: cypress-io/github-action@v6
      with:
        browser: chrome
        headed: false
        config: baseUrl=${{ needs.deploy.outputs.service_url || 'https://gozain-687354193398.us-central1.run.app' }}
        spec: |
          cypress/e2e/02-inventory.cy.js
          cypress/e2e/03-impacts.cy.js
          cypress/e2e/11-maturity-simple-test.cy.js
          cypress/e2e/19-all-business-processes.cy.js
        wait-on: ${{ needs.deploy.outputs.service_url || 'https://gozain-687354193398.us-central1.run.app' }}
        wait-on-timeout: 120
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cypress-results-deploy-${{ github.run_number }}
        path: |
          cypress/screenshots
          cypress/videos
        retention-days: 7
    
    - name: Test summary
      if: always()
      run: |
        echo "## E2E Test Results" >> $GITHUB_STEP_SUMMARY
        echo "Tests executed after deployment of v${{ needs.deploy.outputs.version || 'unknown' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ All tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some tests failed - check artifacts for details" >> $GITHUB_STEP_SUMMARY
        fi